
/**
 * Simulates the receipt of discounted items generated by a clerk
 * 
 * @author Aaditya Bhoota period 3
 *
 */
public class DiscountReceipt extends GroceryReceipt {
	private boolean preferred;// Receipt is for a preferred customer or not
	private int discountCount;// Number of discounted items
	private double discountAmount;// Total discount

	/**
	 * Initializes the clerk to the passed in employee, the receipt to an empty
	 * string, total, internalDiscount to 0 and the preferred flag to the passed in
	 * value
	 * 
	 * @param clerk     - employee gnerating this receipt
	 * @param preferred - true if the receipt is for a preferred customer, false
	 *                  otherwise. Only preferred customers would get a discount.
	 */
	public DiscountReceipt(Employee clerk, boolean preferred) {
		super(clerk);
		this.preferred = preferred;
		discountCount = 0;
		discountAmount = 0;

	}

	/**
	 * Returns the number of discounted items
	 * 
	 * @return discount count
	 */
	public int getDiscountCount() {
		return discountCount;
	}

	/**
	 * Returns the total discounted amount
	 * 
	 * @return total discounted amount
	 */
	public double getDiscountAmount() {
		return discountAmount;
	}

	/**
	 * If the receipt is for a preferred customer and the item is discounted,
	 * updates the discount count and the discount amount. Then it adds the item to
	 * the receipt
	 * @param i - Item to be added
	 */ 
	@Override
	public void add(Item i) {
		if (preferred && i.getDiscount() != 0) {
			discountAmount += i.getDiscount();
			discountCount ++;
		}
			super.add(i);
	}

	/**
	 * Returns the net price after discount
	 * 
	 * @return net price after discount
	 */
	public double getTotal() {
		return super.getTotal() - discountAmount;
	}

	/**
	 * Calculates and returns the percent discount
	 * 
	 * @return discount percent
	 */
	public double getDiscountPercent() {
		return (discountAmount * 100) / super.getTotal();
	}

	/**
	 * Returns a string with list of items (one per line), total receipt amount,
	 * total discount amount, number of discounted items, percent discount and total
	 * amount after discount
	 * 
	 * @return a string of list of items with discounted price information
	 */
	public String toString() {
		return super.getReceipt() + "\nSub-Total: $" + super.valueToString(super.getTotal()) + "\nDiscount: $" + super.valueToString(getDiscountAmount()) + "\nNumber Of discounted items: " + getDiscountCount()
		+ "\nDiscount percent: " + super.valueToString(getDiscountPercent()) + "%\nTotal: $" + super.valueToString(getTotal());
	}
}